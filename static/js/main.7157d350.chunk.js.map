{"version":3,"sources":["Components/WeatherDisplay.js","App.js","serviceWorker.js","index.js"],"names":["WeatherDisplay","props","state","weatherData","zip","this","fetch","then","res","json","setState","console","log","className","viewBox","cx","cy","r","fill","stroke-width","stroke-miterlimit","weather","iconUrl","icon","main","name","src","alt","description","temp","temp_max","temp_min","wind","speed","Component","PLACES","App","activePlace","map","place","index","key","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"iRAoDeA,G,8DA/CX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,YAAa,MAHF,E,gEAME,IAAD,OACVC,EAAMC,KAAKJ,MAAMG,IAIvBE,MAHY,oDACRF,EACA,0DACOG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAAAE,GACpC,EAAKC,SAAS,CAAEP,YAAaM,S,+BAIjC,IAAMN,EAAcE,KAAKH,MAAMC,YAE/B,GADAQ,QAAQC,IAAIT,IACPA,EAAa,OACd,yBAAKU,UAAU,eACX,yBAAKA,UAAU,UACX,yBAAKA,UAAU,WAAWC,QAAQ,eAC9B,4BAAQD,UAAU,OAAOE,GAAG,KAAKC,GAAG,KAAKC,EAAE,KAAKC,KAAK,OAAOC,eAAa,IACjEC,oBAAkB,QAE9B,6BALJ,YAUR,IAAMC,EAAUlB,EAAYkB,QAAQ,GAC9BC,EAAU,mCAAqCD,EAAQE,KAAO,OACpE,OACI,6BACI,4BACKF,EAAQG,KADb,OACuBrB,EAAYsB,KAC/B,yBAAKC,IAAKJ,EAASK,IAAKxB,EAAYyB,eAExC,uCAAazB,EAAYqB,KAAKK,KAA9B,QACA,oCAAU1B,EAAYqB,KAAKM,SAA3B,QACA,mCAAS3B,EAAYqB,KAAKO,SAA1B,QACA,0CAAgB5B,EAAY6B,KAAKC,MAAjC,e,GA1CaC,cCCvBC,EAAS,CACX,CAAEV,KAAM,SAAUrB,IAAK,aACvB,CAAEqB,KAAM,SAAUrB,IAAK,UACvB,CAAEqB,KAAM,WAAYrB,IAAK,YACzB,CAAEqB,KAAM,WAAYrB,IAAK,UAuDdgC,E,kDAnDX,WAAYnC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTmC,YAAa,GAHF,E,qDAOZ,IAAD,OACCA,EAAchC,KAAKH,MAAMmC,YAC/B,OACI,6BACI,yBAAKxB,UAAU,iDACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,UACX,uBAAGA,UAAU,gBAAb,+BAIZ,6BACA,6BACA,6BACA,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,SACX,wBAAIA,UAAU,+BACTsB,EAAOG,KAAI,SAACC,EAAOC,GAAR,OACR,wBAAI3B,UAAW2B,IAAU,EAAKtC,MAAMmC,YAAc,2BAA6B,kBAC3EI,IAAKD,EACLE,QAAS,WACL,EAAKhC,SAAS,CAAE2B,YAAaG,MAGhCD,EAAMd,WAKvB,yBAAKZ,UAAU,UACf,yBAAKA,UAAU,iBACX,kBAAC,EAAD,CACI4B,IAAKJ,EACLjC,IAAK+B,EAAOE,GAAajC,c,GA1CpC8B,aCAES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhD,MAAK,SAAAiD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhD,QAAQgD,MAAMA,EAAMC,c","file":"static/js/main.7157d350.chunk.js","sourcesContent":["import React, {Component} from \"react\";\r\nimport './WeatherDisplay.css';\r\n\r\n\r\nclass WeatherDisplay extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            weatherData: null\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        const zip = this.props.zip;\r\n        const URL = \"http://api.openweathermap.org/data/2.5/weather?q=\" +\r\n            zip +\r\n            \"&appid=b1b35bba8b434a28a0be2a3e1071ae5b&units=imperial\";\r\n        fetch(URL).then(res => res.json()).then(json => {\r\n            this.setState({ weatherData: json });\r\n        });\r\n    }\r\n    render() {\r\n        const weatherData = this.state.weatherData;\r\n        console.log(weatherData);\r\n        if (!weatherData) return (\r\n            <div className=\"shadowboxes\">\r\n                <div className=\"loader\">\r\n                    <svg className=\"circular\" viewBox=\"25 25 50 50\">\r\n                        <circle className=\"path\" cx=\"50\" cy=\"50\" r=\"20\" fill=\"none\" stroke-width=\"2\"\r\n                                stroke-miterlimit=\"10\"/>\r\n                    </svg>\r\n                    <br/>\r\n                    Loading\r\n                </div>\r\n            </div>\r\n        );\r\n        const weather = weatherData.weather[0];\r\n        const iconUrl = \"http://openweathermap.org/img/w/\" + weather.icon + \".png\";\r\n        return (\r\n            <div>\r\n                <h1>\r\n                    {weather.main} in {weatherData.name}\r\n                    <img src={iconUrl} alt={weatherData.description} />\r\n                </h1>\r\n                <p>Current: {weatherData.main.temp}°</p>\r\n                <p>High: {weatherData.main.temp_max}°</p>\r\n                <p>Low: {weatherData.main.temp_min}°</p>\r\n                <p>Wind Speed: {weatherData.wind.speed} mi/hr</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default WeatherDisplay;","import React, {Component} from 'react';\nimport './App.css';\nimport WeatherDisplay from './Components/WeatherDisplay'\n\n\nconst PLACES = [\n    { name: \"Almaty\", zip: \"Almaty,kz\" },\n    { name: \"Astana\", zip: \"Astana\" },\n    { name: \"Shymkent\", zip: \"Shymkent\" },\n    { name: \"Honolulu\", zip: \"96803\" }\n];\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            activePlace: 0,\n        };\n    }\n\n render() {\n     const activePlace = this.state.activePlace;\n     return (\n         <div >\n             <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n                 <div className=\"container\">\n                     <div className=\"title \">\n                         <p className=\"navbar-brand\" >React Simple Weather App</p>\n                     </div>\n                 </div>\n             </nav>\n             <br/>\n             <br/>\n             <br/>\n             <div className=\"container\">\n                 <div className=\"row\">\n                     <div className=\"col-4\">\n                         <ul className=\"list-group list-group-flush\">\n                             {PLACES.map((place, index) => (\n                                 <li className={index === this.state.activePlace ? 'list-group-item active-l' : 'list-group-item'}\n                                     key={index}\n                                     onClick={() => {\n                                         this.setState({ activePlace: index });\n                                     }}\n                                 >\n                                     {place.name}\n                                 </li>\n                             ))}\n                         </ul>\n                     </div>\n                     <div className=\"col-1\"></div>\n                     <div className=\"col-7 weather\">\n                         <WeatherDisplay\n                             key={activePlace}\n                             zip={PLACES[activePlace].zip}\n                         />\n                     </div>\n                 </div>\n             </div>\n         </div>\n     );\n }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}